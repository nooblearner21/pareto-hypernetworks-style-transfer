import argparse
from torchvision import datasets, transforms
from style_transfer import train_network, stylize


LR = 0.0005
STYLE_WEIGHT = 25000
CONTENT_WEIGHT = 1
EPOCHS = 10
BATCH_SIZE = 4
DIRICHLET_ALPHA = 0.2
HYPERVEC_DIM = 10000
NUM_HYPERVECS = 7
CHUNKS = 24

#TODO add argument ray ~raise exception on stylize if not provided

def main():
    arg_parser = argparse.ArgumentParser(description="User arguments for style transfer")
    arg_parser.add_argument("--train", action="store_true", help="Train a new model")
    arg_parser.add_argument("--stylize", action="store_true", help="Use an existing model to perform style transfer on an image")
    arg_parser.add_argument("--image", type=str, required=True,
                            help="In train mode then this is the style image that the model will be trained on. In stylize mode this is the image to perform style transfer on")
    arg_parser.add_argument("--trained-models-output-path", type=str, default='.')
    arg_parser.add_argument("--stylize-model-path", type=str, help="In stylize mode this is the path of the model that performs the style transfer")
    arg_parser.add_argument("--lr", type=float, default=LR, help="Learning rate of the network")
    arg_parser.add_argument("--style-weight", type=float, default=STYLE_WEIGHT, help="Style weight - more means larger emphasis on style")
    arg_parser.add_argument("--content-weight", type=float, default=CONTENT_WEIGHT, help="Content Weight - more means larger conservation of the original content")
    arg_parser.add_argument("--epochs", type=int, default=EPOCHS, help="Number of epochs to run on the training set")
    arg_parser.add_argument("--batch-size", type=int, default=BATCH_SIZE, help="Size of batch in each iteration during training")
    arg_parser.add_argument("--eval-image", type=str, help="Path of evaluation image")
    arg_parser.add_argument("--train-data-path", type=str, help="Path of training data")
    arg_parser.add_argument("--dirichlet-alpha", type=float,  default=DIRICHLET_ALPHA, help="Alpha value for dirchlet disturbution - Rays are sampled from here")
    arg_parser.add_argument("--hypervec-dim", type=int, default=HYPERVEC_DIM, help="Dimension of weight vector generated by hypernetwork")
    arg_parser.add_argument("--num-hypervecs", type=int, default=NUM_HYPERVECS, help="Number of weight vectors to generate")
    arg_parser.add_argument("--chunks", type=int, default=CHUNKS, help="Number of chunks to generate by hypernetwork")
    arg_parser.add_argument("--ray", nargs='+',type=float, 
                        help="The ray to stylize with, please pass two numbers of your choice that would represent the emphasis of content and style losses respectively ")

    args = arg_parser.parse_args()
    if(args.train):
        if not args.train_data_path:
            raise Exception('Missing --train-data-path flag!')

        #Load and preprocess training images
        transform = transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(256),
            transforms.ToTensor(),
            transforms.Lambda(lambda x: x.mul(255)),
        ])
        dataset = datasets.ImageFolder(args.train_data_path, transform=transform)

        train_network(
            dataset=dataset, 
            style_image_path=args.image, 
            trained_models_output_path=args.trained_models_output_path, 
            epochs=args.epochs, 
            batch_size=args.batch_size, 
            lr=args.lr, 
            content_weight=args.content_weight, 
            style_weight=args.style_weight,
            dirichlet_alpha=args.dirichlet_alpha,
            hypervec_dim=args.hypervec_dim,
            num_hypervecs=args.num_hypervecs,
            chunks=args.chunks,
            eval_image=args.eval_image
        )

    elif(args.stylize):
        if not args.stylize_model_path:
            raise Exception('Flag --stylize-model-path was not passed, cannot stylize!')

        if not args.ray or len(args.ray) != 2:
            raise Exception('Ray (--ray) must be exactly 2 numbers (Content and Style)')

        ray_content = args.ray[0]
        ray_style = args.ray[1]

        if (ray_content <= 0 or ray_style <= 0):
            raise Exception('Ray values must be positive!')

        ray_sum = ray_content + ray_style

        ray = [ray_content / ray_sum, ray_style / ray_sum]

        stylize(
            content_image_path=args.image,
            model_path=args.stylize_model_path,
            num_chunks=args.chunks,
            num_hypervecs=args.num_hypervecs,
            hypervec_dim=args.hypervec_dim,
            ray=ray,
            imsize=256
        )

    else:
        raise Exception('Program must be given either --train or --stylize flags!')


if __name__ == "__main__":
    main()
